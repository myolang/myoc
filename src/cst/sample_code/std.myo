in std

extern struct Uint

extern fun Uint.to_int(self) -> Option<Int>
extern fun Uint.to_f32(self) -> F32
extern fun Uint.to_f64(self) -> F64

extern struct Int

extern fun Int.to_uint(self) -> Option<Uint>
extern fun Int.to_f32(self) -> F32
extern fun Int.to_f64(self) -> F64

extern struct F32
extern struct F64

extern fun F32.to_f64(self) -> F64
extern fun F32.to_int(self) -> Option<Int>
extern fun F32.to_uint(self) -> Option<Uint>

extern fun F64.to_f32(self) -> F32
extern fun F64.to_int(self) -> Option<Int>
extern fun F64.to_uint(self) -> Option<Uint>

extern struct String
extern fun String.len(self) -> Uint
extern fun String.index_of(self, substr: String) -> Option<Uint>
extern fun String.to_uppercase(self) -> String
extern fun String.to_lowercase(self) -> String
extern fun String.slice(self, start_byte: Uint, end_byte: Uint) -> Option<String>
extern fun String.slice_to_end(self, start_byte: Uint) -> Option<String>
extern fun String.concat(self, other: String) -> String

extern struct Option<T>
extern Option.none<T>: Option<T>
extern fun Option.some<T>(value: T) -> Option<T>
extern fun Option.elim<T, U>(self<T>, if_none: U, if_some: Fun(T) -> U) -> U

fun Option.map<T, U>(self<T>, f: Fun(T) -> U) -> Option<U>
fun Option.and_then<T, U>(self<T>, f: Fun(T) -> Option<U>) -> Option<U> {
    self.elim(Option.none, f)
}
fun Option.op=@<T, U>(self<T>, f: Fun(T) -> Option<U>) -> Option<U> {
    self.and_then(f)
}
fun Option.or<T>(self<T>, f: Option<T>) -> Option<T> {
    self.elim(f, Option.some)
}
fun Option.unwrap_or<T>(self<T>, default: T) -> T {
    self.elim(default, identity)
}


extern struct Result<T, E>
extern fun Result.ok<T, E>(raw: T) -> Result<T, E>
extern fun Result.error<T, E>(raw: E) -> Result<T, E>
extern fun Result.elim<T, E, U>(self<T, E>, if_error: Fun(E) -> U, if_ok: Fun(T) -> U) -> U

fun Result.map_ok<T, U, E>(self<T, E>, f: Fun(T) -> U) -> Result<U, E> {
    self.elim(Result.error, closure _(value: T) -> Result<U, E> { Result.ok(f(value))})
}
fun Result.map_error<T, U, E>(self<T, E>, f: Fun(E) -> U) -> Result<T, U> {
    self.elim(closure _(value: E) -> Result<T, U> { Result.err(f(value)) }, Result.ok)
}
fun Result.and<T, U, E>(self<T, E>, right: Result<U, E>) -> Result<U, E> {
    self.elim(Result.error, closure _(_: T) -> Result<U, E> { right })
}
fun Result.and_then<T, U, E>(self<T, E>, f: Fun(T) -> Result<U, E>) -> Result<U, E> {
    self.elim(Result.error, f)
}
fun Result.op=@<T, U, E>(self<T, E>, f: Fun(T) -> Result<U, E>) -> Result<U, E> {
    self.and_then(f)
}
fun Result.or<T, E>(self<T, E>, right: Result<T, E>) -> Result<T, E> {
    self.elim(closure _(_: E) -> Result<T, E> { right }, Result.ok)
}
fun Result.or_else<T, E, F>(self<T, E>, f: Fun(E) -> Result<T, F>) -> Result<T, F> {
    self.elim(f, Result.ok)
}
fun Result.unwrap_or<T, E>(self<T, E>, default: T) -> T {
    self.elim(closure _(_: E) -> T { default }, identity)
}
fun Result.unwrap_or_else<T, E>(self<T, E>, f: Fun(E) -> T) -> T {
    self.elim(f, identity)
}
fun Result.unwrap_error_or<T, E>(self<T, E>, default: E) -> E {
    self.elim(identity, closure _(_: T) -> E { default })
}
fun Result.unwrap_error_or_else<T, E>(self<T, E>, f: Fun(T) -> E) -> E {
    self.elim(identity, f)
}

extern struct Bool
extern Bool.true: Bool
extern Bool.false: Bool
extern fun Bool.not(self) -> Bool
extern fun Bool.and(self, right: Bool) -> Bool
extern fun Bool.or(self, right: Bool) -> Bool
extern fun Bool.xor(self, right: Bool) -> Bool
extern fun Bool.eq(self, right: Bool) -> Bool
fun Bool.op==(self, right: Bool) -> Bool {
    self.eq(right)
}
fun Bool.op!=(self, right: Bool) -> Bool {
    self.xor(right)
}

extern struct Vec<T>
// TODO implement Vec functions

fun identity<T>(x: T) -> T {
    x
}

in std.math

use std.*

extern fun Int.op+(self, right: Int) -> Int
extern fun Int.op-(self, right: Int) -> Int
extern fun Int.op*(self, right: Int) -> Int
extern fun Int.op/(self, right: Int) -> Int
extern fun Int.op%(self, right: Int) -> Int

extern fun Uint.op+(self, right: Uint) -> Uint
extern fun Uint.op-(self, right: Uint) -> Uint
extern fun Uint.op*(self, right: Uint) -> Uint
extern fun Uint.op/(self, right: Uint) -> Uint
extern fun Uint.op%(self, right: Uint) -> Uint

extern fun F32.op+(self, right: F32) -> F32
extern fun F32.op-(self, right: F32) -> F32
extern fun F32.op*(self, right: F32) -> F32
extern fun F32.op/(self, right: F32) -> F32
extern fun F32.op%(self, right: F32) -> F32
extern fun F32.op**(self, right: F32) -> F32
extern fun F32.log(self) -> F32

extern fun F64.op+(self, right: F64) -> F64
extern fun F64.op-(self, right: F64) -> F64
extern fun F64.op*(self, right: F64) -> F64
extern fun F64.op/(self, right: F64) -> F64
extern fun F64.op%(self, right: F64) -> F64
extern fun F64.op**(self, right: F64) -> F64
extern fun F64.log(self) -> F64

struct Radians(F64)

extern fun Radians.cos(self) -> F64
extern fun Radians.sin(self) -> F64
extern fun Radians.tan(self) -> F64

extern fun F32.acos(self) -> Radians
extern fun F32.asin(self) -> Radians
extern fun F32.atan(self) -> Radians

extern fun F64.acos(self) -> Radians
extern fun F64.asin(self) -> Radians
extern fun F64.atan(self) -> Radians
