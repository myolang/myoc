in canvas

use std.*

extern struct Io<T>[]

extern fun Io.ok<T>(raw: T) -> canvas.Io<T>

fun Io.pure<T>(raw: T) -> canvas.Io<T> {
    Io.ok(raw)
}

extern fun Io.error<T>(message: String) -> canvas.Io<T>

extern fun Io.then<T, U>(self<T>, f: Fun(T) -> Io<U>) -> Io<U>

fun Io.op=@<T, U>(self<T>, f: Fun(T) -> Io<U>) -> Io<U> {
    self.then(f)
}

extern width: Io<Uint>

extern height: Io<Uint>

extern time: Io<Seconds>

struct Seconds[e0: F64]

extern random: Io<F64>

extern fun is_keydown(key: String) -> Io<Bool>

extern struct DrawCommand
extern fun DrawCommand.fill_rect(x: Int, y: Int, w: Uint, h: Uint, color: Rgba) -> DrawCommand
fun DrawCommand.draw_image(image_name: String, x: Int, y: Int, w: Uint, h: Uint) -> DrawCommand {
    DrawCommand.draw_image_with_alpha(image_name, x, y, w, h, 255u8)
}
extern fun DrawCommand.draw_image_with_alpha(image_name: String, x: Int, y: Int, w: Uint, h: Uint, alpha: U8) -> DrawCommand

struct Rgba[r: U8, g: U8, b: U8, a: U8]
